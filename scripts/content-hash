#!/usr/bin/env node
/**
 * content-hash creates a hash of the content of a file
 *
 * @module content-hash
 */
;(function () {
  'use strict'

  /* imports */
  const hashFunction = require('hash-function')
  const fs = require('fs')

  const lowercase = 'abcdefghijklmnopqrstuvwxyz'
  const base64Alphabet = (lowercase
    + lowercase.toUpperCase()
    + '0123456789'
    + '-_').split('')

  const files = [
    ['public/', 'stylesheet', '.css'],
    ['public/', 'manifest', '.webmanifest'],
    ['public/', 'app', '.js']
  ]

  const filesToUpdate = [
    'public/index.html',
    'public/sw.js'
  ]

  files.forEach(([path, file, ext], i) => {
    contentHash({ file: path + file + ext }, (error, hash) => {
      const oldFile = file + ext
      const newFile = `${file}-${hash}${ext}`
      console.log(`${oldFile} -> ${newFile}`)
      fs.rename(path + oldFile, path + newFile, function () {
        filesToUpdate
          .forEach(f => {
            const data = fs.readFileSync(f, 'utf8')
            const result = data.replace(new RegExp(oldFile, 'g'), newFile);

            fs.writeFileSync(f, result, 'utf8')
          })
      })
    })
  })

  /**
   * contentHash creates a hash of the content of a file
   *
   * @function contentHash
   * @alias content-hash
   *
   * @param {Object} options all function parameters
   * @param {Function} callback handle results
   */
  function contentHash ({ file }, callback) {
    console.log(file)
    fs.readFile(file, function (error, content) {
      const string = content.toString()
      hashFunction({ string }, (error, n) =>
        callback(
          null,
          Array
            .from({ length: 6 }, () => {
              const base64Digit = Math.max(0, n % 64)
              n -= base64Digit
              n /= 64
              return base64Alphabet[base64Digit]
            })
            .reverse()
            .join('')
        )
      )
    })
  }
})()

